# Build properties used by zAppBuild/build.groovy

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,bind.properties,Assembler.properties,Cobol.properties,PLI.properties

#
# Comma separated list all source directories included in application build. Supports both absolute
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=Assembler.groovy,Cobol.groovy,PLI.groovy

#
# The main build branch.  Used for cloning collections for topic branch builds instead
# of rescanning the entire application.
mainBuildBranch=master

#
# exclude list used when scanning or running full build
excludeFileList=.*,**/*.properties,**/*.xml,**/*.groovy,**/*.md,**/application-conf/*.*,**/IRR@XACS.asm

###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################
#
# flag to define which DBB API is used for dependency and impact analysis
# 
#  false = uses the DependencyResolver and ImpactResolver APIs (default)
#          please note that DependencyResolver and ImpactResolver APIs are deprecated
#          configuration is based on the lang_resolutionRules and impactResolutionRules build properties
#
#  true  = leverages the DBB SearchPathDependencyResolver and SearchParthImpactFinder APIs introduced with DBB 1.1.2
#          configuration is based on the lang_dependencySearch and impactSearch build properties
#          When using DBB 2.0, only the SearchPathDependencyResolver and SearchParthImpactFinder APIs are available,
#          and you have to set it to true
#
useSearchConfiguration=true

#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
# 
#  requires to use new APIs via useSearchConfiguration=true
#  default:false 
resolveSubsystems=false

#
# Impact analysis resolution rules (JSON format).
# Defaults to just looking for local application dependency folders
# ** deprecated ** - see zAppBuild build property >impactSearch< 
impactResolutionRules=[${copybookRule},${plincRule},${maclibRule},${asmCopyRule}]

#
# Impact finder resolution search configuration
#  leverages the SearchPathImpactFinder API 
impactSearch=${copybookSearch}${pliincludeSearch}${asmCopySearch}

# Rule to locate Cobol copy books. This rule defaults to the local copybook folder
# in the main application folder.
# used in dependency resolution and impact analysis  
# ** deprecated **
copybookRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/COPYBOOK"}, \
                    {"sourceDir": "${workspace}", "directory": "${application}/COPYLIB"}, \
                    {"sourceDir": "${workspace}", "directory": "${application}/COPYLIB-MVS"} \                    
                 ] \
               }

#
# copybookSearch 
# searchPath to locate Cobol copybooks 
# used in dependency resolution and impact analysis              
copybookSearch = search:${workspace}/?path=${application}/COPYBOOK/*.cpy;${application}/COPYLIB/*.cpy;${application}/COPYLIB-MVS/*.cpy  


# Rule to locate PLI include files. This rule defaults to the local plinc folder
# in the main application folder.
# used in dependency resolution and impact analysis  
plincRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/INCLUDES"}, \
                    {"sourceDir": "${workspace}", "directory": "${application}/INCLUDELIB"}, \
                    {"sourceDir": "${workspace}", "directory": "${application}/INCLUDELIB-MVS"} \                 
                 ] \
               }
#
# pliincludeSearch 
# searchPath to locate PLI include files 
# used in dependency resolution and impact analysis
pliincludeSearch = search:${workspace}/?path=${application}/INCLUDES/*.inc;${application}/INCLUDELIB/*.inc;${application}/INCLUDELIB-MVS/*.inc


# Rule to locate ASM copylibs. This rule defaults to the local copylib folder
# in the main application folder.
# Category filters on what you want to include during the scanner 
asmCopyRule = {"library": "SYSLIB", "category": "COPY", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/ASMCOPY"} \
                 ] \
              }

# asmCopySearch 
# searchPath to locate Assembler copy files 
# used in dependency resolution and impact analysis                
asmCopySearch = search:[SYSLIB:COPY]${workspace}/?path=${application}/ASMCOPY/*.asm
               