/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (C) Copyright IBM Corporation 2021. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/

@groovy.transform.BaseScript com.ibm.dbb.groovy.ScriptLoader baseScript
import com.ibm.dbb.build.*
import com.ibm.dbb.repository.*
import com.ibm.dbb.dependency.*
import groovy.util.*
import groovy.transform.*

hlq      = args[0]  // user to run the jobs such as "IBMUSER"
logsDir  = args[1]  // absolute path such as "/u/ibmuser/projects/zopeneditor-sample"

compilerDS = "{{ cobol6_compiler_library }}"
linklib    = "{{ link_library }}"
sam1link   = """
     INCLUDE OBJ(SAM1)
     ENTRY SAM1
     NAME SAM1(R)
"""
sam2link   = """
     INCLUDE OBJ(SAM2)
     NAME SAM2(R)
"""

// DS Names
def srcPDS = "${hlq}.SAMPLE.COBOL" // src dataset
def objPDS = "${hlq}.SAMPLE.OBJ" // obj dataset
def loadPDS = "${hlq}.SAMPLE.LOAD" //load dataset (will contain the executables)
def copyPDS = "${hlq}.SAMPLE.COBCOPY"
def member1 = "SAM1"
def member2 = "SAM2"

// Log Files
String sam1_compile_log = "${logsDir}/logs/sam1_compile.log"
String sam2_compile_log = "${logsDir}/logs/sam2_compile.log"
String sam1_link_log    = "${logsDir}/logs/sam1_link.log"
String sam2_link_log    = "${logsDir}/logs/sam2_link.log"

// ********* COMPILATION *********** //
compileProgram(srcPDS, member2, compilerDS, copyPDS, objPDS, sam2_compile_log) //Compile SAM2
compileProgram(srcPDS, member1, compilerDS, copyPDS, objPDS, sam1_compile_log) //Compile SAM1

// ********* LINK PROGRAM *********  //
linkProgram(loadPDS, member2, objPDS, linklib, sam2link, sam2_link_log) //Link SAM2
linkProgram(loadPDS, member1, objPDS, linklib, sam1link, sam1_link_log) //Link SAM1

/*
 * compileProgram - compiles a program
 */
def compileProgram(String srcDS, String member, String compilerDS, String copyDS, String objectDS, String log_file){
	def tempOptions = "cyl space(5,5) unit(vio) new"

	def compile = new MVSExec().pgm("IGYCRCTL").parm("LIST,MAP,NODYN")
	compile.dd(new DDStatement().name("TASKLIB").dsn("${compilerDS}").options("shr"))
	compile.dd(new DDStatement().name("SYSIN").dsn("${srcDS}($member)").options("shr"))
	compile.dd(new DDStatement().name("SYSLIB").dsn("${copyDS}").options("shr")) //copybook .COBCOPY
	compile.dd(new DDStatement().name("SYSLIN").dsn("${objectDS}($member)").options("shr"))
	(1..17).toList().each { num ->
		compile.dd(new DDStatement().name("SYSUT$num").options(tempOptions))
		}
	compile.dd(new DDStatement().name("SYSMDECK").options(tempOptions))
	compile.dd(new DDStatement().name("SYSPRINT").options(tempOptions))
	compile.copy(new CopyToHFS().ddName("SYSPRINT").file(new File(log_file)))
	println("COMPILE: ${srcDS}:${member} -> ${objectDS}:${member}")
	def rc = compile.execute()

	if (rc > 4){
		println(" ${member} Compile failed!  RC=$rc")
		System.exit(rc)
	}
	else
		println(" ${member} Compile successful!  RC=$rc")

	return(rc)
}

/*
 * linkProgram - links a program
 */
def linkProgram(String loadDS, String member, String objectDS, String linklibDS, String link_card, String log_file){
	def tempOptions = "cyl space(5,5) unit(vio) new"

	def link = new MVSExec().pgm("IEWL").parm("")
	link.dd(new DDStatement().name("SYSLMOD").dsn(loadDS).options("shr"))
	link.dd(new DDStatement().name("SYSUT1").options(tempOptions))
	link.dd(new DDStatement().name("OBJ").dsn(objectDS).options("shr"))
	link.dd(new DDStatement().name("SYSLIN").instreamData(link_card))
	link.dd(new DDStatement().name("SYSLIB").dsn(linklibDS).options("shr"))
	link.dd(new DDStatement().dsn("SYS1.MACLIB").options("shr"))
	link.dd(new DDStatement().name("SYSPRINT").options(tempOptions))
	link.copy(new CopyToHFS().ddName("SYSPRINT").file(new File(log_file)))
	println("LINK: ${objectDS}:${member} -> ${loadDS}:${member}")
	def rc = link.execute()

	if (rc > 4){
		println(" ${member} Link failed!  RC=$rc")
		System.exit(rc)
	}
	else
		println(" ${member} Link successful!  RC=$rc")

	return(rc)
}
