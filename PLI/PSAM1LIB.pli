 PSAM1: PROC OPTIONS(MAIN) RETURNS(DEC(12,2));
 /****************************************************************
  * LICENSED MATERIALS - PROPERTY OF IBM
  * "RESTRICTED MATERIALS OF IBM"
  * (C) COPYRIGHT IBM CORPORATION 2021. ALL RIGHTS RESERVED
  * US GOVERNMENT USERS RESTRICTED RIGHTS - USE, DUPLICATION,
  * OR DISCLOSURE RESTRICTED BY GSA ADP SCHEDULE
  * CONTRACT WITH IBM CORPORATION
  ****************************************************************
  * PROGRAM:  PSAM1    (PLI FOR MVS AND VM)
  *
  * AUTHOR :  DOUG STOUT
  *           IBM PD TOOLS
  *
  * READS A FILE AND WRITES A REPORT
  * PROCESSING IS CONTROLLED BY A TRANSACTION FILE
  *
  ****************************************************************
  *
  * TRANSACTION FILE RECORD DESCRIPTIONS:
  *     0    1    1    2    2    3    3    4    4    5    5    6    6
  * ....5....0....5....0....5....0....5....0....5....0....5....0....5
  * *        <== AN ASTERISK IN FIRST COLUMN IS A COMMENT
  * PRINT    <== PRODUCES A DETAIL REPORT
  * TOTALS   <== PRODUCES A SUMMARY REPORT
  *
  ****************************************************************/

   DCL DUMP_FINDER CHAR(30) INIT('*STORAGE FOR PROGRAM PSAM1***');

   /**********************/
   /* INPUT/OUTPUT FILES */
   /**********************/

   DCL CUSTFILE FILE INPUT RECORD SEQUENTIAL
              ENV(FB RECSIZE(80) BLKSIZE(0));
   DCL TRANFILE FILE INPUT RECORD SEQUENTIAL BUFFERED;
   DCL CUSTRPT FILE STREAM PRINT;

   /*************************************
    * TRANFILE RECORD                   *
    *************************************/
    DCL 1 TRAN_RECORD,
          2 TRAN_CODE          CHAR(6),
          2 TRAN_FILL3         CHAR(1),
          2 CRUNCH_PARMS,
            3 CRUNCH_IO_LOOPS    PIC '99999',
            3 CRUNCH_FILL1       CHAR(1),
            3 CRUNCH_CPU_LOOPS   PIC '999999999',
          2 CRUNCH_FILL2       CHAR(58);

    DCL TRAN_COMMENT           CHAR(1)    DEFINED TRAN_RECORD;
    DCL TRAN_RECORD_ALL        CHAR(80)   DEFINED TRAN_RECORD;

   /***************************************
    * CUSTFILE RECORDS                    *
    ***************************************/
      %INCLUDE CUSTPLI;

   /********************
    * PROGRAM FLAGS    *
    ********************/

   DCL  TRANFILE_EOF BIT(1) INIT ('0'B);
   DCL  CUSTFILE_EOF BIT(1) INIT ('0'B);
   DCL  TRAN_OK_FLAG BIT(1) INIT ('1'B);

   /********************
    * GENERAL DECLARES *
    ********************/

   /*******************************************************************/
   /* This include demonstrates the libraries setting for local       */
   /*******************************************************************/
   %INCLUDE MYFILE (DATETIME);


   /*******************************************************************/
   /* This include demonstrates the libraries setting for MVS includes*/
   /*******************************************************************/
   %INCLUDE MYLIB (REPTTOTL);


   DCL PROGRAM_STATUS        CHAR(30);

   /***************************************
    * CUSTOMER BALANCE STATS              *
    ***************************************/
   %INCLUDE BALSTATS;

   DCL PSAM2 EXTERNAL ENTRY;

   /************************************
    * REPORT LINES, TEXT, AND FORMATS  *
    ************************************/

   DCL MSG_BAD_TRAN   CHAR(20) INIT('TRANSACTION ERROR:  ');
   DCL MSG_OPEN_ERROR CHAR(20) INIT('ERROR OPENING FILE: ');
   DCL MSG_ONFILE     CHAR(25) INIT('                DD NAME: ');
   DCL MSG_ONCODE     CHAR(25) INIT('    FILE CONDITION CODE: ');
   DCL MSG_ONCONDID   CHAR(25) INIT('           CONDITION ID: ');
   DCL MSG_ONCONDCOND CHAR(25) INIT('         CONDITION NAME: ');

   DCL HDR1_TEXT1     CHAR(40)
                     INIT('SAMPLE CUSTOMER FILE REPORT       DATE: ');
   DCL HDR1_TEXT2     CHAR(20) INIT(' (MM/DD/YYYY) TIME: ');
   DCL 1 HDR2,
         2 HDR2A CHAR(40) UNALIGNED
               INIT('ID    CUSTOMER NAME     OCCUPATION      '),
         2 HDR2B CHAR(40) UNALIGNED
               INIT('                 BALANCE ORDERS-YTD     ');
   DCL 1 HDR3,
         2 HDR3A CHAR(40) UNALIGNED
               INIT('----- ----------------- ----------------'),
         2 HDR3B CHAR(40) UNALIGNED
               INIT('------------ ----------- ----------     ');

   DCL MSG_TRANREC    CHAR(80);
   DCL MSG_TRAN1      CHAR(12) INIT('TRANSACTION:');
   DCL SPACE          CHAR(1)  INIT(' ');
   DCL SLASH          CHAR(1)  INIT('/');
   DCL COLON          CHAR(1)  INIT(':');

   FMT_MSG1: FORMAT ( A(22),A(4),A(1),A(2),A(1),A(2),A(20) );
   FMT_MSG2: FORMAT ( A(22),A(2),A(1),A(2),A(1),A(2) );
   FMT_CUST1:FORMAT ( SKIP,A(5),X(1),A(17),X(1),A(28),X(2),
                                P'ZZZ,ZZ9V.99',X(1),P'ZZ,ZZZ,ZZ9' );
   FMT_TRAN1:FORMAT ( SKIP,X(1),A(12),X(2),A(80) );
   FMT_ERR1: FORMAT ( SKIP(1),A(20),X(5),A(25),A(29) );

   DCL NUMA_7V2        PIC 'ZZZ,ZZ9V.99';
   DCL NUMB_7V2        PIC 'ZZZ,ZZ9V.99';
   DCL NUMC_7V2        PIC 'ZZZ,ZZ9V.99';
   DCL NUMA_11         PIC 'ZZZ,ZZZ,ZZ9';
   DCL NUMB_11         PIC 'ZZZ,ZZZ,ZZ9';
   DCL NUMC_11         PIC 'ZZZ,ZZZ,ZZ9';

   /********************************
    * CONDITION HANDLING ROUTINES  *
    ********************************/

   ON ENDFILE (CUSTFILE)
     CUSTFILE_EOF = '1'B;

   ON ENDFILE (TRANFILE)
     TRANFILE_EOF = '1'B;

   ON ENDPAGE (CUSTRPT)
   BEGIN;
     /*  PRINT REPORT HEADINGS  */
     FMT_HDR1: FORMAT ( PAGE,A(40),A(2),A(1),A(2),A(1),A(4),A(20),
                                A(2),A(1),A(2),A(1),A(2) );
     PUT FILE(CUSTRPT)
       EDIT(HDR1_TEXT1,
            CURRENT_MONTH, SLASH, CURRENT_DAY, SLASH, CURRENT_YEAR,
            HDR1_TEXT2,
           CURRENT_HOUR, COLON, CURRENT_MINUTE, COLON, CURRENT_SECOND)
           (R(FMT_HDR1));
     IF ( TRAN_CODE = 'PRINT ' ) THEN
       CALL PRTHDG1;
   END;
   /*****************************************************
    * MAIN PROGRAM ROUTINE                              *
    *****************************************************/

   PROGRAM_STATUS = 'PROGRAM STARTED';
   STRING(SYSTEM_DATE_AND_TIME) = DATETIME();
   PUT PAGE EDIT('PSAM1 STARTED  DATE = ',
                 CURRENT_YEAR, SLASH, CURRENT_MONTH, SLASH,
                 CURRENT_DAY, '  (YYYY/MM/DD)') (R(FMT_MSG1));
   PUT SKIP EDIT('               TIME = ', CURRENT_HOUR, COLON,
                CURRENT_MINUTE, COLON, CURRENT_SECOND) (R(FMT_MSG2));

   BALANCE_FIRST_TIME_SW = 1;

   PROGRAM_STATUS = 'OPENING FILES  ';
   OPEN FILE (TRANFILE);
   OPEN FILE (CUSTRPT);

   SIGNAL ENDPAGE(CUSTRPT);  /*  PRINT REPORT HEADINGS  */

   /******************************************************
    * MAIN PROGRAM LOOP TO PROCESS TRANSACTION RECORDS   *
    ******************************************************/
   DCL I FIXED DEC(2);
   I = 1;
   TRANFILE_LOOP: DO WHILE (I > 0);
     PROGRAM_STATUS = 'READING TRAN RECORD';
     READ FILE (TRANFILE) INTO (TRAN_RECORD);

     IF ( TRANFILE_EOF ) THEN
       LEAVE TRANFILE_LOOP;    /*  EXIT LOOP AT END OF TRAN FILE   */
     IF ( TRAN_COMMENT = '*' ) THEN
       GOTO NEXT_TRANFILE_LOOP;  /*  SKIP COMMENT RECORDS          */

     NUM_TRANFILE_RECS   = NUM_TRANFILE_RECS + 1;
     PROGRAM_STATUS = 'WRITING TRAN REPORT';
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) EDIT( MSG_TRAN1, TRAN_RECORD_ALL )
                           (R(FMT_TRAN1));
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     TRAN_OK_FLAG = '1'B;

     SELECT ( TRAN_CODE );

       WHEN ('PRINT ') DO;    /* PRINT TRANSACTION */
         PROGRAM_STATUS = 'PRINTING CUSTOMER REPORT';
         NUM_TRANSACTIONS = NUM_TRANSACTIONS + 1;
         NUM_PRINT_REQUESTS = NUM_PRINT_REQUESTS + 1;
         CALL PRTHDG1;
         OPEN FILE (CUSTFILE);
         CUSTFILE_LOOP: DO WHILE (I > 0);
         /* CHANGED FROM CUSTFILE_RECORD TO CUSTOMER_RECORD */
           READ FILE (CUSTFILE) INTO (CUSTOMER_RECORD);
           IF ( CUSTFILE_EOF ) THEN
             LEAVE CUSTFILE_LOOP;    /*  EXIT LOOP AT END OF FILE */
           NUM_CUSTFILE_RECS = NUM_CUSTFILE_RECS + 1;
           /*  SUBROUTINE PSAM2 WILL COLLECT STATISTICS */
           IF ( CUSTOMER_RECORD.RECORD_TYPE = 'C' )  THEN  DO;
             NUM_CUSTOMER_RECS = NUM_CUSTOMER_RECS + 1;
             PUT FILE (CUSTRPT)
               EDIT(CUSTOMER_RECORD.CUST_ID, CUSTOMER_RECORD.NAME,
                    CUSTOMER_RECORD.OCCUPATION,
                    CUSTOMER_RECORD.ACCT_BALANCE,
                    CUSTOMER_RECORD.ORDERS_YTD) (R(FMT_CUST1));
             NUM_DETAIL_LINES = NUM_DETAIL_LINES + 1;
                /* CALCULATE RUNNING TOTALS */
             CALL PSAM2 ( CUSTFILE_RECORD,
                           CUSTOMER_BALANCE_STATS );
           END;    /*  IF RECORD_TYPE = 'C'  */
         END CUSTFILE_LOOP;
         NUM_PRINT_COMPLETED  = NUM_PRINT_COMPLETED + 1;
         CLOSE FILE (CUSTFILE);
       END;         /*  WHEN TRAN_CODE = 'PRINT '         */
       WHEN ('TOTALS') DO;    /* TOTALS TRANSACTION */
         PROGRAM_STATUS = 'PRINTING TOTALS REPORT';
         NUM_TRANSACTIONS    = NUM_TRANSACTIONS + 1;
         NUM_TOTALS_REQUESTS = NUM_TOTALS_REQUESTS + 1;
         CALL TRANTOT;
         NUM_PRINT_COMPLETED = NUM_PRINT_COMPLETED + 1;
       END;         /*  WHEN TRAN_CODE = 'TOTALS'         */
       OTHERWISE       DO;    /* UNKNOWN TRANSACTION */
         NUM_TRANSACTIONS    = NUM_TRANSACTIONS + 1;
         PUT FILE (CUSTRPT) SKIP (1)
            LIST ('INVALID TRANSACTION CODE: ', TRAN_CODE);
         NUM_TRAN_ERRORS = NUM_TRAN_ERRORS + 1;
       END;
     END;         /*  SELECT TRAN_CODE                  */
   NEXT_TRANFILE_LOOP:
   END TRANFILE_LOOP;

   TRANTOT: PROCEDURE;
     FMT_TOT1: FORMAT ( SKIP,X(2),A(15),X(4),A(11),A(11),
                             X(3),A(11),A(11),X(3),A(11),A(11) );
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) SKIP (1) LIST ('TOTALS REPORT');
     PUT FILE (CUSTRPT) SKIP (1) LIST ((99)'-');
     IF ( NUM_PRINT_COMPLETED > 0 ) THEN DO;
       NUMA_7V2 = BALANCE_TOTAL;
       NUMB_7V2 = BALANCE_MAX;
       NUMC_7V2 = BALANCE_AVG;
       PUT FILE (CUSTRPT)
          EDIT ('ACCT BALANCE:',
          '     TOTAL:', NUMA_7V2,
          '       MAX:', NUMB_7V2,
          '   AVERAGE:', NUMC_7V2 )
          (R(FMT_TOT1));
       NUMA_11 = NUM_CUSTFILE_RECS;
       NUMB_11 = NUM_CUSTOMER_RECS;
       PUT FILE (CUSTRPT)
          EDIT ('RECORD COUNTS:',
          ' ALL TYPES:', NUMA_11,
          ' ALL TYPES:', NUMA_11,
          ' CUST RECS:', NUMB_11 )
          (R(FMT_TOT1));
       NUMA_11 = NUM_TRANSACTIONS;
       NUMB_11 = NUM_TRANSACTIONS - NUM_TRAN_ERRORS;
       NUMC_11 = NUM_TRAN_ERRORS;
       PUT FILE (CUSTRPT)
          EDIT ('TRANSACTIONS:',
          '     COUNT:', NUMA_11,
          ' PROCESSED:', NUMB_11,
          '    ERRORS:', NUMC_11 )
          (R(FMT_TOT1));
       NUM_TOTALS_COMPLETED = NUM_TOTALS_COMPLETED + 1;
     END;     /*  IF NUM_PRINT_COMPLETED > 0   */
     ELSE DO;
       PUT FILE (CUSTRPT) SKIP (1)
          LIST ('CANNOT COMPLETE TOTALS TRAN. ',
                'A PRINT TRAN MUST BE REQUESTED/PROCESSED FIRST.');
     END;
   END TRANTOT;


   PRTHDG1: PROCEDURE;
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR2));
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR3));
   END PRTHDG1;

   PROGRAM_STATUS = 'PROGRAM ENDING';

 PROGRAM_END:
 RETURN(BALANCE_AVG);
 END PSAM1;
